/* Generated By:JavaCC: Do not edit this line. MCompiler_Iteration.java */
package edu.casetools.mreasoner.compiler.iterations;
import java.io.FileReader;
import java.util.Calendar;
import java.util.Vector;

import edu.casetools.mreasoner.core.MSpecification;
import edu.casetools.mreasoner.core.elements.MRules;
import edu.casetools.mreasoner.core.elements.MStatus;
import edu.casetools.mreasoner.core.elements.events.Event;
import edu.casetools.mreasoner.core.elements.rules.NextTimeRule;
import edu.casetools.mreasoner.core.elements.rules.SameTimeRule;
import edu.casetools.mreasoner.core.elements.states.DefaultState;
import edu.casetools.mreasoner.core.elements.states.State;
import edu.casetools.mreasoner.core.elements.states.Internal.CalendarAt;
import edu.casetools.mreasoner.core.elements.states.Internal.CalendarBetween;
import edu.casetools.mreasoner.core.elements.states.Internal.ClockAt;
import edu.casetools.mreasoner.core.elements.states.Internal.ClockBetween;
import edu.casetools.mreasoner.core.elements.states.Internal.WeekDayAt;
import edu.casetools.mreasoner.core.elements.states.Internal.WeekDayBetween;
import edu.casetools.mreasoner.core.elements.time.absolute.Date;
import edu.casetools.mreasoner.core.elements.time.absolute.TimeOfDay;
import edu.casetools.mreasoner.core.elements.time.top.Bound;
import edu.casetools.mreasoner.core.elements.time.top.TemporalOperator;
import edu.casetools.mreasoner.core.elements.time.top.TemporalOperator.TOP_TYPE;



@SuppressWarnings("all")
public class MCompiler_Iteration implements MCompiler_IterationConstants {
  public static Vector<String > statesDeclaration = null;
public static void main(String[] args) {
try{
MCompiler_Iteration parser = new MCompiler_Iteration (new FileReader("C:/MTPL/input/Examples/Example01/inputSystem.mtpl"));
        parser.readSystemSpecifications();

}catch (Exception ex)
{ex.printStackTrace() ;}
}

  final public MSpecification readSystemSpecifications() throws ParseException {
        MSpecification inputData = new MSpecification();
           Vector<State> independentStates = new Vector<State>();
           Vector<Event> eventsHistory = new Vector<Event>();
           MStatus initialStatus = new MStatus();
           MRules systemRules = new MRules();
            State auxiliar;
    statesDeclaration = statesDeclaration();
          initialStatus = setDeclaredStates(statesDeclaration);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDEPENDENT_STATE_START:
      case EVENT_START:
      case STATE_INITIALIZATION_START:
      case STR_START:
      case NTR_START:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATE_INITIALIZATION_START:
        initialStatus = stateInitialization(initialStatus);
        break;
      case INDEPENDENT_STATE_START:
        auxiliar = independentStates();
                                independentStates.add(auxiliar);
        break;
      case EVENT_START:
        eventDeclaration(eventsHistory);
        break;
      case STR_START:
        systemRules = sameTimeRule(systemRules);
        break;
      case NTR_START:
        systemRules = nextTimeRule(systemRules);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
   inputData.setDeclaredStates(statesDeclaration);
   inputData.setIndependentStates(independentStates);
   inputData.setSystemStatus(initialStatus);
   inputData.setEventsHistory(eventsHistory);
   inputData.setSystemRules(systemRules);
   //inputData.printInputData();
  {if (true) return inputData;}
    throw new Error("Missing return statement in function");
  }

//Generic functions
  final public void genericStop() throws ParseException {
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(POINT_COMMA);
  }

  final public State genericState() throws ParseException {
                       State state = new State();
                                                String name = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNDERSCORE:
    case DIGIT:
    case ALPHABET:
    case CAPSALPHABET:
      name = readString();
                  state.setStatus(true);
      break;
    case NEGATION:
      jj_consume_token(NEGATION);
      name = readString();
                  state.setStatus(false);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  stateIsDeclared(name);
                  state.setName(name);
                  {if (true) return state;}
    throw new Error("Missing return statement in function");
  }

  final public State genericStateWithoutSign(boolean status) throws ParseException {
                                                State state = new State();
                                                String name = "";
    name = readString();
                  stateIsDeclared(name);
                  state.setName(name);
                  state.setStatus(status);
                  {if (true) return state;}
    throw new Error("Missing return statement in function");
  }

  final public TemporalOperator genericStateWithOperator() throws ParseException {
                                                                                          TemporalOperator temporalOperator = null;
                                                                                          State state = null;
    temporalOperator = temporalOperator();
    state = genericState();
                                                                                           temporalOperator.setName(state.getName());
                                                                                           temporalOperator.setStatus(state.getStatus());
                                                                                           {if (true) return temporalOperator;}
    throw new Error("Missing return statement in function");
  }

  final public String readString() throws ParseException {
      Token name;
      String auxiliar = "";
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case ALPHABET:
        name = jj_consume_token(ALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case UNDERSCORE:
        name = jj_consume_token(UNDERSCORE);
           auxiliar = auxiliar + name.toString();
        break;
      case CAPSALPHABET:
        name = jj_consume_token(CAPSALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
 {if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

//Java functions
  final public MStatus setDeclaredStates(Vector<String >statesDeclaration) throws ParseException {
  MStatus systemStatus = new MStatus();
      for(int i=0;i<statesDeclaration.size();i++)
          {
                        State s = new State();
                        s.setName(statesDeclaration.get(i));
                systemStatus.getSystemStatus().add(s);
          }
          {if (true) return systemStatus;}
    throw new Error("Missing return statement in function");
  }

  final public MStatus setInitialValue(MStatus systemStatus,State state) throws ParseException {
      for(int i=0;i<systemStatus.getSystemStatus().size();i++)
      {
                if(systemStatus.getSystemStatus().get(i).getName().equals(state.getName()))
                        systemStatus.getSystemStatus().setElementAt(state, i);
      }
          {if (true) return systemStatus;}
    throw new Error("Missing return statement in function");
  }

  final public boolean stateIsDeclared(String state) throws ParseException {
      for(int i=0;i<statesDeclaration.size();i++)
      {
           if(statesDeclaration.get(i).equals(state)) {if (true) return true;}
      }
      {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): State "+state+" is not declared.");}
          {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

//Generic States Declaration
  final public Vector<String> statesDeclaration() throws ParseException {
  Vector<String> states = null;
    statesDeclarationStart();
    states = statesDeclarationContent();
    statesDeclarationStop();
    {if (true) return states;}
    throw new Error("Missing return statement in function");
  }

  final public void statesDeclarationStart() throws ParseException {
    jj_consume_token(STATE_DECLARATION_START);
  }

  final public void statesDeclarationStop() throws ParseException {
    genericStop();
  }

  final public Vector<String> statesDeclarationContent() throws ParseException {
    Vector<String> states = new Vector<String>();
          states.add(readString());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
                states.add(readString());
    }
          {if (true) return states;}
    throw new Error("Missing return statement in function");
  }

//Internal States
  final public DefaultState internalState(boolean status) throws ParseException {
                                             DefaultState defaultState = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCK_AT_START:
    case CLOCK_BETWEEN_START:
      defaultState = clockState(status);
      break;
    case CALENDAR_AT_START:
    case CALENDAR_BETWEEN_START:
      defaultState = calendarState(status);
      break;
    case WEEKDAY_AT_START:
    case WEEKDAY_BETWEEN_START:
      defaultState = weekDayState(status);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return defaultState;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultState clockState(boolean status) throws ParseException {
                                          DefaultState defaultState = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCK_AT_START:
      defaultState = clockAt(status);
      break;
    case CLOCK_BETWEEN_START:
      defaultState = clockBetween(status);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                                                       {if (true) return defaultState;}
    throw new Error("Missing return statement in function");
  }

  final public ClockAt clockAt(boolean status) throws ParseException {
                                  ClockAt clockAt = new ClockAt();TimeOfDay timeOfDay;
    jj_consume_token(CLOCK_AT_START);
    timeOfDay = clockTime();
    jj_consume_token(RIGHT_BRACKET);
                                                                                                                                                  clockAt.setTime(timeOfDay);clockAt.setStatus(status);{if (true) return clockAt;}
    throw new Error("Missing return statement in function");
  }

  final public ClockBetween clockBetween(boolean status) throws ParseException {
                                            ClockBetween clockBetween = new ClockBetween();TimeOfDay since,until;
    jj_consume_token(CLOCK_BETWEEN_START);
    since = clockTime();
    jj_consume_token(HYPHEN);
    until = clockTime();
    jj_consume_token(RIGHT_BRACKET);
          clockBetween.setSince(since);
          clockBetween.setUntil(until);
          clockBetween.setStatus(status);
          {if (true) return clockBetween;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultState calendarState(boolean status) throws ParseException {
                                             DefaultState defaultState = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALENDAR_AT_START:
      defaultState = calendarAt(status);
      break;
    case CALENDAR_BETWEEN_START:
      defaultState = calendarBetween(status);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                                                                {if (true) return defaultState;}
    throw new Error("Missing return statement in function");
  }

  final public CalendarAt calendarAt(boolean status) throws ParseException {
                                        CalendarAt calendarAt = new CalendarAt();Date date;
    jj_consume_token(CALENDAR_AT_START);
    date = calendarTime();
    jj_consume_token(RIGHT_BRACKET);
                                                                                                                                                            calendarAt.setDate(date);calendarAt.setStatus(status);{if (true) return calendarAt;}
    throw new Error("Missing return statement in function");
  }

  final public CalendarBetween calendarBetween(boolean status) throws ParseException {
                                                  CalendarBetween calendarBetween = new CalendarBetween();Date since,until;
    jj_consume_token(CALENDAR_BETWEEN_START);
    since = calendarTime();
    jj_consume_token(HYPHEN);
    until = calendarTime();
    jj_consume_token(RIGHT_BRACKET);
                                calendarBetween.setSince(since);
                                calendarBetween.setUntil(until);
                                calendarBetween.setStatus(status);
                                {if (true) return calendarBetween;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultState weekDayState(boolean status) throws ParseException {
                                            DefaultState defaultState = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WEEKDAY_AT_START:
      defaultState = weekDayAt(status);
      break;
    case WEEKDAY_BETWEEN_START:
      defaultState = weekDayBetween(status);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                              {if (true) return defaultState;}
    throw new Error("Missing return statement in function");
  }

  final public WeekDayAt weekDayAt(boolean status) throws ParseException {
                                      WeekDayAt weekDayAt = new WeekDayAt();int weekDay;
    jj_consume_token(WEEKDAY_AT_START);
    weekDay = weekDay();
    jj_consume_token(RIGHT_BRACKET);
                                                                                                                                                        weekDayAt.setWeekDay(weekDay);weekDayAt.setStatus(status);{if (true) return weekDayAt;}
    throw new Error("Missing return statement in function");
  }

  final public WeekDayBetween weekDayBetween(boolean status) throws ParseException {
                                                WeekDayBetween weekDayBetween = new WeekDayBetween();int since,until;
    jj_consume_token(WEEKDAY_BETWEEN_START);
    since = weekDay();
    jj_consume_token(HYPHEN);
    until = weekDay();
    jj_consume_token(RIGHT_BRACKET);
                        weekDayBetween.setSince(since);
                        weekDayBetween.setUntil(until);
                        weekDayBetween.setStatus(status);
                        {if (true) return weekDayBetween;}
    throw new Error("Missing return statement in function");
  }

//Time Definitions
  final public TimeOfDay clockTime() throws ParseException {
  TimeOfDay timeOfDay = new TimeOfDay();
  Token aux,aux2;
  int[] min_sec = new int[2];
  int index = 0;
          for(int i=0;i<min_sec.length;i++) min_sec[i] = 0;
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
                                        timeOfDay.setHour(hourToInt(aux.toString()+aux2.toString()));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TWO_POINT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(TWO_POINT);
      aux = jj_consume_token(DIGIT);
      aux2 = jj_consume_token(DIGIT);
                            if (index > 1) {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Wrong time format.");}
                                min_sec[index] = minToInt(aux.toString()+aux2.toString());
                                index++;
    }
                         timeOfDay.setMinute(min_sec[0]);
                         timeOfDay.setSecond(min_sec[1]);
                          {if (true) return timeOfDay;}
    throw new Error("Missing return statement in function");
  }

  final public Date calendarTime() throws ParseException {
                      Date date = new Date();Token aux,aux2,aux3,aux4;
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
                                                                                                      date.setDay_of_month(dayOfMonthToInt(aux.toString()+aux2.toString()));
    jj_consume_token(SLASH);
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
                                                                                                                                                            date.setMonth(monthToInt(aux.toString()+aux2.toString()));
    jj_consume_token(SLASH);
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
    aux3 = jj_consume_token(DIGIT);
    aux4 = jj_consume_token(DIGIT);
                                                                                                                                                                                      date.setYear(yearToInt(aux.toString()+aux2.toString()+aux3.toString()+aux4.toString()));
                                                                                                                                 {if (true) return date;}
    throw new Error("Missing return statement in function");
  }

  final public int minToInt(String value) throws ParseException {
                             int result = 0;
                                                                  result = Integer.parseInt(value);
                                                                  if((result > 59)||(result < 0))  {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Wrong minute/second format.");}
                                                                  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int hourToInt(String value) throws ParseException {
                               int result = 0;
                                                                  result = Integer.parseInt(value);
                                                                  if((result > 23)||(result < 0))  {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Wrong hour format.");}
                                                                  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int dayOfMonthToInt(String value) throws ParseException {
                                    int result = 0;
                                                                  result = Integer.parseInt(value);
                                                                  if((result > 31)||(result < 1))  {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Wrong day of month format.");}
                                                                  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int monthToInt(String value) throws ParseException {
                                int result = 0;
                                                                  result = Integer.parseInt(value);
                                                                  if((result > 12)||(result < 1))  {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Wrong month format.");}
                                                                  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int yearToInt(String value) throws ParseException {
                               int result = 0;
                                                                  result = Integer.parseInt(value);
                                                                  if((result < 0))  {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Wrong year format.");}
                                                                  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void isZero(String value) throws ParseException {
                             int result = 0;
                                                                  result = Integer.parseInt(value);
                                                                  if((result != 0))  {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): The syntax to initialize values the format should be 'holdsAt(<sign><state_name>,0);'");}
  }

  final public int weekDay() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
                               {if (true) return Calendar.MONDAY;}
      break;
    case 46:
      jj_consume_token(46);
                                                                    {if (true) return Calendar.TUESDAY;}
      break;
    case 47:
      jj_consume_token(47);
                                                      {if (true) return Calendar.WEDNESDAY;}
      break;
    case 48:
      jj_consume_token(48);
                                                                                               {if (true) return Calendar.THURSDAY;}
      break;
    case 49:
      jj_consume_token(49);
                                                   {if (true) return Calendar.FRIDAY;}
      break;
    case 50:
      jj_consume_token(50);
                                                                                         {if (true) return Calendar.SATURDAY;}
      break;
    case 51:
      jj_consume_token(51);
                                                                                                                               {if (true) return Calendar.SUNDAY;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Bound absoluteTime() throws ParseException {
  Bound bound = new Bound();
  Date date = new Date();
  TimeOfDay time = new TimeOfDay();
  int weekDay = 0;
  Token t1,t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
      t1 = jj_consume_token(DIGIT);
      t2 = jj_consume_token(DIGIT);
                          bound = regularAbsoluteTime(bound, t1.toString()+t2.toString());
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      weekDay = weekDay();
                          bound.setWeekDay(weekDay);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
          {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

  final public Bound simulationValue() throws ParseException {
  Bound bound = new Bound();
  String value = "";
  Token t1;
    label_5:
    while (true) {
      t1 = jj_consume_token(DIGIT);
                          value = value + t1.toString();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
    }
          bound.setSimulation_value(Long.parseLong(value));
          {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

  final public Bound regularAbsoluteTime(Bound bound, String firstDigit) throws ParseException {
        int firstValue = 0;
        Token t1,t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      jj_consume_token(SLASH);
           firstValue = dayOfMonthToInt(firstDigit);
           bound.getDate().setDay_of_month(firstValue);
      bound = regularAbsoluteTimeMonth(bound);
      break;
    case TWO_POINT:
      jj_consume_token(TWO_POINT);
     firstValue = hourToInt(firstDigit);
     bound.getTime_of_day().setHour(firstValue);
     bound = regularAbsoluteTime_TimeOfDay(bound);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

  final public Bound regularAbsoluteTime_TimeOfDay(Bound bound) throws ParseException {
  Token aux,aux2;
  String seconds = "00";
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
                                        bound.getTime_of_day().setMinute(minToInt(aux.toString()+aux2.toString()));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TWO_POINT:
      jj_consume_token(TWO_POINT);
      aux = jj_consume_token(DIGIT);
      aux2 = jj_consume_token(DIGIT);
                                                seconds = aux.toString()+aux2.toString();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                          bound.getTime_of_day().setSecond(minToInt(seconds));
                         {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

  final public Bound regularAbsoluteTimeMonth(Bound bound) throws ParseException {
  Token aux,aux2,aux3,aux4;
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
                                     bound.getDate().setMonth(monthToInt(aux.toString()+aux2.toString()));
    jj_consume_token(SLASH);
    aux = jj_consume_token(DIGIT);
    aux2 = jj_consume_token(DIGIT);
    aux3 = jj_consume_token(DIGIT);
    aux4 = jj_consume_token(DIGIT);
                                                                 bound.getDate().setYear(yearToInt(aux.toString()+aux2.toString()+aux3.toString()+aux4.toString()));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
                  bound.setTime_of_day(clockTime());
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

//Bound regularAbsoluteTime()://{//  Bound bound = new Bound();//  Date date = new Date();//  TimeOfDay time = new TimeOfDay();//}//{		date = calendarTime()// (<POINT> time = clockTime())?//		{//		  bound.setDate(date);//    	  bound.setTime_of_day(time);//    	  return bound;//    	}//}

//Bounded Past Operators
  final public TemporalOperator temporalOperator() throws ParseException {
                                      TemporalOperator temporalOperator = null;
                                                                          boolean isStrong = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRONG:
      strong();
            isStrong = true;
      break;
    case WEAK:
      weak();
                                       isStrong = false;
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LEFT_SQR_BRACKET);
    temporalOperator = operator(isStrong);
    jj_consume_token(RIGHT_SQR_BRACKET);
  {if (true) return temporalOperator;}
    throw new Error("Missing return statement in function");
  }

  final public void strong() throws ParseException {
    jj_consume_token(STRONG);
  }

  final public void weak() throws ParseException {
    jj_consume_token(WEAK);
  }

  final public TemporalOperator operator(boolean isStrong) throws ParseException {
                                             TemporalOperator temporalOperator = null;
    temporalOperator = absolute(isStrong);
    {if (true) return temporalOperator;}
    throw new Error("Missing return statement in function");
  }

//TemporalOperator inmediate(boolean isStrong):{//  							  TemporalOperator temporalOperator = new TemporalOperator();//						      Bound bound = new Bound();//							  Token auxiliar;//							  String digit = "";//							 }//						     {//						      (auxiliar = <DIGIT >{digit = digit + auxiliar.toString();})*//							  {bound.setSimulation_value(Long.parseLong(digit));//							   temporalOperator.setSinceValue(bound);//							   if(isStrong) temporalOperator.setType(TOP_TYPE.STRONG_RELATIVE);//							   else temporalOperator.setType(TOP_TYPE.WEAK_RELATIVE);//							   return temporalOperator;}//							  //							 }
  final public TemporalOperator absolute(boolean isStrong) throws ParseException {
 TemporalOperator temporalOperator = new TemporalOperator();
 Bound since = null ,until = null;
    since = simulationValue();
         if(isStrong) temporalOperator.setType(TOP_TYPE.STRONG_RELATIVE);
         else temporalOperator.setType(TOP_TYPE.WEAK_RELATIVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HYPHEN:
      jj_consume_token(HYPHEN);
      until = simulationValue();
             if(isStrong) temporalOperator.setType(TOP_TYPE.STRONG_ABSOLUTE);
                 else temporalOperator.setType(TOP_TYPE.WEAK_ABSOLUTE);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
     if(until != null)checkBounds(since,until);
     else if (since.getSimulation_value() == 0){if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Zero value is not allowed.");}

     temporalOperator.setSinceValue(since);
     temporalOperator.setUntilValue(until);
     {if (true) return temporalOperator;}
    throw new Error("Missing return statement in function");
  }

  final public boolean checkBounds(Bound since,Bound until) throws ParseException {
                                               boolean result = false;
          if(since.isEmpty_Simulation() == until.isEmpty_Simulation() )
          {

            result = true;
//	    System.out.println("SINCE: "+since.getSimulation_value());
//	    System.out.println("UNTIL: "+until.getSimulation_value());
          }

          else if(since.isEmpty_RealTime() == until.isEmpty_RealTime() )
          {
             result =  false;

        //    System.out.println("SINCE: ");
         //   since.printRealTime();
          // 	System.out.println("UNTIL: ");
         //   until.printRealTime();
          }
          else
          {
                {if (true) throw new Error("(Line:"+jj_input_stream.line+",Column:"+jj_input_stream.column+"): Invalid temporal operator format.");}

          }

          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Bound simulatedTime() throws ParseException {
  Bound bound = new Bound();
  Token t;
  String value = "";
    jj_consume_token(LEFT_BRACKET);
    label_6:
    while (true) {
      t = jj_consume_token(DIGIT);
    value = value + t.toString();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(RIGHT_BRACKET);
    bound.setSimulation_value(Long.parseLong(value));
    {if (true) return bound;}
    throw new Error("Missing return statement in function");
  }

//Independent States
  final public State independentStates() throws ParseException {
                            State state;
    independentStatesStart();
    state = independentStatesContent();
    independentStatesStop();
    {if (true) return state;}
    throw new Error("Missing return statement in function");
  }

  final public void independentStatesStart() throws ParseException {
    jj_consume_token(INDEPENDENT_STATE_START);
  }

  final public void independentStatesStop() throws ParseException {
    genericStop();
  }

  final public State independentStatesContent() throws ParseException {
                                        {if (true) return genericState();}
    throw new Error("Missing return statement in function");
  }

//Events
  final public Vector<Event > eventDeclaration(Vector<Event > eventsHistory) throws ParseException {
    eventDeclarationStart();
    eventsHistory = eventDeclarationContent(eventsHistory);
    eventDeclarationStop();
{if (true) return eventsHistory;}
    throw new Error("Missing return statement in function");
  }

  final public void eventDeclarationStart() throws ParseException {
    jj_consume_token(EVENT_START);
  }

  final public void eventDeclarationStop() throws ParseException {
    genericStop();
  }

  final public Vector<Event > eventDeclarationContent(Vector<Event > eventsHistory) throws ParseException {
                                                                       Event event;Token auxiliar;String time="";
    event = eventIngression();
    jj_consume_token(COMMA);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      auxiliar = jj_consume_token(DIGIT);
  time = time + auxiliar.toString();
    }
  event.setTime(Long.parseLong(time));
   eventsHistory.add(event);
   {if (true) return eventsHistory;}
    throw new Error("Missing return statement in function");
  }

  final public Event eventIngression() throws ParseException {
                          State state;
    eventIngressionStart();
    state = genericState();
    eventIngressionStop();
  Event event = new Event();
  event.setStatus(state.getStatus());
  event.setName(state.getName());
  {if (true) return event;}
    throw new Error("Missing return statement in function");
  }

  final public void eventIngressionStart() throws ParseException {
    jj_consume_token(INGRESSION_START);
  }

  final public void eventIngressionStop() throws ParseException {
    jj_consume_token(RIGHT_BRACKET);
  }

//State Initialization
  final public MStatus stateInitialization(MStatus systemStatus) throws ParseException {
    stateInitializationStart();
    stateInitializationContent(systemStatus);
    stateInitializationStop();
  {if (true) return systemStatus;}
    throw new Error("Missing return statement in function");
  }

  final public void stateInitializationStart() throws ParseException {
    jj_consume_token(STATE_INITIALIZATION_START);
  }

  final public void stateInitializationStop() throws ParseException {
    genericStop();
  }

  final public MStatus stateInitializationContent(MStatus systemStatus) throws ParseException {
                                                           Token zero;
    systemStatus = initializeState(systemStatus);
    jj_consume_token(COMMA);
    zero = jj_consume_token(DIGIT);
 isZero(zero.toString());{if (true) return systemStatus;}
    throw new Error("Missing return statement in function");
  }

  final public MStatus initializeState(MStatus systemStatus) throws ParseException {
  {if (true) return setInitialValue(systemStatus,genericState());}
    throw new Error("Missing return statement in function");
  }

//Same Time Rules
  final public MRules sameTimeRule(MRules systemRules) throws ParseException {
                                          SameTimeRule sameTimeRule;
    sameTimeRuleStart();
    sameTimeRule = sameTimeRuleContent();
    sameTimeRuleStop();
                                                                                                                                                      systemRules.getSameTimeRules().add(sameTimeRule);{if (true) return systemRules;}
    throw new Error("Missing return statement in function");
  }

  final public void sameTimeRuleStart() throws ParseException {
    jj_consume_token(STR_START);
  }

  final public void sameTimeRuleStop() throws ParseException {
    genericStop();
  }

  final public SameTimeRule sameTimeRuleContent() throws ParseException {
                                     SameTimeRule sameTimeRule = new SameTimeRule();boolean status = true;
    jj_consume_token(LEFT_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATION:
      jj_consume_token(NEGATION);
      sameTimeRule = sameTimeRuleAntecedentContent(sameTimeRule,false);
      break;
    case UNDERSCORE:
    case DIGIT:
    case ALPHABET:
    case CAPSALPHABET:
    case CLOCK_AT_START:
    case CLOCK_BETWEEN_START:
    case CALENDAR_AT_START:
    case CALENDAR_BETWEEN_START:
    case WEEKDAY_AT_START:
    case WEEKDAY_BETWEEN_START:
    case STRONG:
    case WEAK:
      sameTimeRule = sameTimeRuleAntecedentContent(sameTimeRule,true);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGATION:
        jj_consume_token(NEGATION);
        sameTimeRule = sameTimeRuleAntecedentContent(sameTimeRule,false);
        break;
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
      case CLOCK_AT_START:
      case CLOCK_BETWEEN_START:
      case CALENDAR_AT_START:
      case CALENDAR_BETWEEN_START:
      case WEEKDAY_AT_START:
      case WEEKDAY_BETWEEN_START:
      case STRONG:
      case WEAK:
        sameTimeRule = sameTimeRuleAntecedentContent(sameTimeRule,true);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(ARROW);
    sameTimeRule = sameTimeRuleConsequenceContent(sameTimeRule);
     {if (true) return sameTimeRule;}
    throw new Error("Missing return statement in function");
  }

  final public SameTimeRule sameTimeRuleAntecedentContent(SameTimeRule sameTimeRule,boolean status) throws ParseException {
                                                                                       State state;DefaultState defaultState;TemporalOperator temporalOperator;boolean sign = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCK_AT_START:
    case CLOCK_BETWEEN_START:
    case CALENDAR_AT_START:
    case CALENDAR_BETWEEN_START:
    case WEEKDAY_AT_START:
    case WEEKDAY_BETWEEN_START:
      defaultState = internalState(status);
                                                                        sameTimeRule.addInternalState(defaultState);
      break;
    case STRONG:
    case WEAK:
      temporalOperator = genericStateWithOperator();
                                                                                          sameTimeRule.getTemporalOperators().add(temporalOperator);
      break;
    case UNDERSCORE:
    case DIGIT:
    case ALPHABET:
    case CAPSALPHABET:
      state = genericStateWithoutSign(status);
                                                                                    sameTimeRule.getAntecedents().add(state);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return sameTimeRule;}
    throw new Error("Missing return statement in function");
  }

  final public SameTimeRule sameTimeRuleConsequenceContent(SameTimeRule sameTimeRule) throws ParseException {
                                                                         State state;
    state = genericState();
                                                                                                                  sameTimeRule.addConsequence(state);{if (true) return sameTimeRule;}
    throw new Error("Missing return statement in function");
  }

//Next Time Rules
  final public MRules nextTimeRule(MRules systemRules) throws ParseException {
                                          NextTimeRule nextTimeRule;
    nextTimeRuleStart();
    nextTimeRule = nextTimeRuleContent();
    nextTimeRuleStop();
    systemRules.getNextTimeRules().add(nextTimeRule);{if (true) return systemRules;}
    throw new Error("Missing return statement in function");
  }

  final public void nextTimeRuleStart() throws ParseException {
    jj_consume_token(NTR_START);
  }

  final public void nextTimeRuleStop() throws ParseException {
    genericStop();
  }

  final public NextTimeRule nextTimeRuleContent() throws ParseException {
                                     NextTimeRule nextTimeRule = new NextTimeRule();
    jj_consume_token(LEFT_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATION:
      jj_consume_token(NEGATION);
      nextTimeRule = nextTimeRuleAntecedentContent(nextTimeRule,false);
      break;
    case UNDERSCORE:
    case DIGIT:
    case ALPHABET:
    case CAPSALPHABET:
    case CLOCK_AT_START:
    case CLOCK_BETWEEN_START:
    case CALENDAR_AT_START:
    case CALENDAR_BETWEEN_START:
    case WEEKDAY_AT_START:
    case WEEKDAY_BETWEEN_START:
    case STRONG:
    case WEAK:
      nextTimeRule = nextTimeRuleAntecedentContent(nextTimeRule,true);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGATION:
        jj_consume_token(NEGATION);
        nextTimeRule = nextTimeRuleAntecedentContent(nextTimeRule,false);
        break;
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
      case CLOCK_AT_START:
      case CLOCK_BETWEEN_START:
      case CALENDAR_AT_START:
      case CALENDAR_BETWEEN_START:
      case WEEKDAY_AT_START:
      case WEEKDAY_BETWEEN_START:
      case STRONG:
      case WEAK:
        nextTimeRule = nextTimeRuleAntecedentContent(nextTimeRule,true);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(ARROW);
    nextTimeRule = nextTimeRuleConsequenceContent(nextTimeRule);
    {if (true) return nextTimeRule;}
    throw new Error("Missing return statement in function");
  }

  final public NextTimeRule nextTimeRuleAntecedentContent(NextTimeRule nextTimeRule,boolean status) throws ParseException {
                                                                                       State state;DefaultState defaultState;TemporalOperator temporalOperator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCK_AT_START:
    case CLOCK_BETWEEN_START:
    case CALENDAR_AT_START:
    case CALENDAR_BETWEEN_START:
    case WEEKDAY_AT_START:
    case WEEKDAY_BETWEEN_START:
      defaultState = internalState(status);
                                                       nextTimeRule.addInternalState(defaultState);
      break;
    case STRONG:
    case WEAK:
      temporalOperator = genericStateWithOperator();
                                                                        nextTimeRule.getTemporalOperators().add(temporalOperator);
      break;
    case UNDERSCORE:
    case DIGIT:
    case ALPHABET:
    case CAPSALPHABET:
      state = genericStateWithoutSign(status);
                                                                  nextTimeRule.getAntecedents().add(state);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return nextTimeRule;}
    throw new Error("Missing return statement in function");
  }

  final public NextTimeRule nextTimeRuleConsequenceContent(NextTimeRule nextTimeRule) throws ParseException {
                                                                        State state;
    state = genericState();
                                                                                                                 nextTimeRule.addConsequence(state);{if (true) return nextTimeRule;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MCompiler_IterationTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x1e000800,0x1e000000,0x1e000000,0x400000,0x0,0x0,0x0,0x0,0x200000,0x0,0x4000000,0x0,0x4000000,0xa00000,0x200000,0x80000,0x0,0x1000000,0x4000000,0x4000000,0x1e000800,0x1000,0x1e000800,0x1e000000,0x1e000800,0x1000,0x1e000800,0x1e000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x740,0x740,0x0,0x0,0x0,0x0,0x3f,0x3,0xc,0x30,0x0,0xfe000,0x0,0xfe000,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x183f,0x0,0x183f,0x183f,0x183f,0x0,0x183f,0x183f,};
   }

  /** Constructor with InputStream. */
  public MCompiler_Iteration(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MCompiler_Iteration(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MCompiler_IterationTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MCompiler_Iteration(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MCompiler_IterationTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MCompiler_Iteration(MCompiler_IterationTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MCompiler_IterationTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
